---
import type { HTMLAttributes } from "astro/types";

export type ButtonVariant = "primary" | "secondary" | "basic" | "underlined";

export interface ButtonBaseProps {
  variant?: ButtonVariant;
}

interface ButtonProps extends HTMLAttributes<"button">, ButtonBaseProps {
  type: "button";
}

interface LinkProps extends HTMLAttributes<"a">, ButtonBaseProps {
  type: "link";
}

type Props = ButtonProps | LinkProps;

const {
  class: className,
  type = "button",
  variant = "primary",
  ...rest
} = Astro.props;

const classCommon = "text-xs md:text-lg font-normal";
const classBasic = "border-b-2 border-transparent hover:border-black";
const classPrimary =
  "bg-black py-2 px-3 md:py-3.5 md:px-6 text-white uppercase hover:bg-white hover:text-black transition";
const classSecondary = "uppercase";
const classUnderlined = "border-b-2 border-black uppercase";

const classList = [
  classCommon,
  variant === "basic" && classBasic,
  variant === "primary" && classPrimary,
  variant === "secondary" && classSecondary,
  variant === "underlined" && classUnderlined,
];
---

{
  type === "link" ? (
    <a class:list={[...classList, className]} {...rest}>
      <slot />

      {Astro.slots.has("after") && (
        <span>
          <slot />
        </span>
      )}
    </a>
  ) : (
    <button class:list={[...classList, className]} {...rest}>
      <slot />

      {Astro.slots.has("after") && (
        <span>
          <slot />
        </span>
      )}
    </button>
  )
}

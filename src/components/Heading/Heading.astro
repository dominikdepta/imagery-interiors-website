---
import type { HTMLAttributes } from "astro/types";

export type HeadingLevel = "1" | "2" | "3" | "4" | "5" | "6";

interface Props extends HTMLAttributes<"h1"> {
  level: HeadingLevel;
  size?: HeadingLevel;
}

const { level, class: className, size, ...restProps } = Astro.props;

const commonClass = "font-serif tracking-tighter leading-none lg:leading-tight";
const sizeClass: Record<HeadingLevel, string> = {
  "1": "text-4xl lg:text-6xl",
  "2": "text-3xl lg:text-5xl",
  "3": "text-2xl lg:text-4xl",
  "4": "text-xl lg:text-3xl",
  "5": "text-lg lg:text-2xl",
  "6": "",
};

const currentSizeClass = size ? sizeClass[size] : sizeClass[level];
---

{
  level === "1" && (
    <h1 class:list={[currentSizeClass, commonClass, className]} {...restProps}>
      <slot />
    </h1>
  )
}
{
  level === "2" && (
    <h2 class:list={[currentSizeClass, commonClass, className]} {...restProps}>
      <slot />
    </h2>
  )
}
{
  level === "3" && (
    <h3 class:list={[currentSizeClass, commonClass, className]} {...restProps}>
      <slot />
    </h3>
  )
}
{
  level === "4" && (
    <h4 class:list={[currentSizeClass, commonClass, className]} {...restProps}>
      <slot />
    </h4>
  )
}
{
  level === "5" && (
    <h5 class:list={[currentSizeClass, commonClass, className]} {...restProps}>
      <slot />
    </h5>
  )
}
{
  level === "6" && (
    <h6 class:list={["", commonClass, className]} {...restProps}>
      <slot />
    </h6>
  )
}
